<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<Project Sdk="Microsoft.NET.Sdk">
	<PropertyGroup>
		<TargetFramework>net6.0-windows</TargetFramework>
		<Nullable>enable</Nullable>
		<UseWPF>true</UseWPF>
		<AssemblyName>wengine</AssemblyName>
		<AllowUnsafeBlocks>true</AllowUnsafeBlocks>
		<ProjectFullPath>$([System.IO.Path]::GetFullPath('$(MSBuildProjectDirectory)'))</ProjectFullPath>
		<SolutionDirectory>$([System.IO.Path]::GetFullPath('$(ProjectFullPath)\..'))</SolutionDirectory>
		<EngineProjectDir>$(SolutionDirectory)\engine</EngineProjectDir>
		<CheckFilePlatformScriptPath>$(SolutionDirectory)\check_file_platform.ps1</CheckFilePlatformScriptPath>
		<AssemblyVersion>0.0.0.7</AssemblyVersion>
		<FileVersion>0.0.0.7</FileVersion>
		<Version>0.0.0.7</Version>
		<Platforms>x64;x86</Platforms>
	</PropertyGroup>
	<ItemGroup>
		<None Include="..\release_and_publish_nuget.ps1" />
		<None Include="..\check_file_platform.ps1" />
		<None Include="..\SignToolUtilForClient.ps1" />
		<None Include="..\local.config" />
		<None Include="..\.github\**" />
	</ItemGroup>
	<!--<ItemGroup>
	  <ProjectReference Include="..\engine\engine.vcxproj" />
	</ItemGroup>-->
	<Target Name="PreBuild" BeforeTargets="PreBuildEvent" Condition="'$(DoPreBuild)'!='false'">
		<PropertyGroup>
			<PlatformTarget Condition="'$(PlatformTarget)' == ''">x64</PlatformTarget>
			<PlatformToUse Condition="'$(PlatformTarget)' == 'x86'">Win32</PlatformToUse>
			<PlatformToUse Condition="'$(PlatformTarget)' == 'x64'">x64</PlatformToUse>
			<DllPathFile>$(SolutionDirectory)\bin\$(Configuration)\$(PlatformToUse)\cpp_output_path.txt</DllPathFile>
		</PropertyGroup>
		<Exec Command="echo EngineProjectDir=$(EngineProjectDir)" />
		<Exec Command="echo OutDir=$(OutDir)" />
		<Exec Command="echo Configuration=$(Configuration)" />
		<Exec Command="echo Platforms=$(Platforms)" />
		<Exec Command="echo PlatformTarget=$(PlatformTarget)" />
		<Exec Command="echo PlatformToUse=$(PlatformToUse)" />

		<Exec Command="msbuild /v:Detailed /t:Clean /p:Configuration=$(Configuration) /p:Platform=$(PlatformToUse) /p:DoPreBuild=false /p:GitToken=$(GitToken) $(EngineProjectDir)\engine.vcxproj" />
		<Exec Command="msbuild /v:Detailed /t:Build /p:Configuration=$(Configuration) /p:Platform=$(PlatformToUse) /p:DoPreBuild=false /p:GitToken=$(GitToken) $(EngineProjectDir)\engine.vcxproj" />
		<ReadLinesFromFile File="$(DllPathFile)">
			<Output TaskParameter="Lines" PropertyName="DllPathLines" />
		</ReadLinesFromFile>
	</Target>
	<Target Name="CheckDLLBinaryType" AfterTargets="PostBuildEvent">
		<PropertyGroup>
			<DLL1BinaryTypeFile>$(ProjectFullPath)\$(IntermediateOutputPath)DLL1BinaryType.txt</DLL1BinaryTypeFile>
			<DLL2BinaryTypeFile>$(ProjectFullPath)\$(IntermediateOutputPath)DLL2BinaryType.txt</DLL2BinaryTypeFile>
		</PropertyGroup>
		
		<Exec Command="echo Executing CheckDLLBinaryType" />
		<Exec Command="echo CheckFilePlatformScriptPath $(CheckFilePlatformScriptPath)" />
		<Exec Command="echo DLL1BinaryTypeFile $(DLL1BinaryTypeFile)" />
		<Exec Command="echo DLL2BinaryTypeFile $(DLL2BinaryTypeFile)" />
		<Exec Command="powershell -ExecutionPolicy Bypass -File $(CheckFilePlatformScriptPath) -dllPath $(TargetDir)engine.dll &gt; $(DLL1BinaryTypeFile)" />
		<Exec Command="powershell -ExecutionPolicy Bypass -File $(CheckFilePlatformScriptPath) -dllPath $(TargetDir)wengine.dll &gt; $(DLL2BinaryTypeFile)" />

		<ReadLinesFromFile File="$(DLL1BinaryTypeFile)">
			<Output TaskParameter="Lines" PropertyName="DLL1BinaryType" />
		</ReadLinesFromFile>
		<ReadLinesFromFile File="$(DLL2BinaryTypeFile)">
			<Output TaskParameter="Lines" PropertyName="DLL2BinaryType" />
		</ReadLinesFromFile>
		<Exec Command="echo DLL1BinaryType $(DLL1BinaryType)" />
		<Exec Command="echo DLL2BinaryType $(DLL2BinaryType)" />

		<Delete Files="$(DLL1BinaryTypeFile)" />
		<Delete Files="$(DLL2BinaryTypeFile)" />
		<Error Condition="'$(DLL1BinaryType.Trim())' != '$(PlatformTarget)'" Text="The DLL different platform target. DLL1: $(DLL1BinaryType), PlatformTarget=$(PlatformTarget)" />
		<Error Condition="'$(DLL1BinaryType.Trim())' == ''" Text="The DLLs have different binary types. DLL1: $(DLL1BinaryType), DLL2: $(DLL2BinaryType)" />
		<Error Condition="'$(DLL2BinaryType.Trim())' == ''" Text="The DLLs have different binary types. DLL1: $(DLL1BinaryType), DLL2: $(DLL2BinaryType)" />
		<Error Condition="'$(DLL1BinaryType.Trim())' != '$(DLL2BinaryType.Trim())'" Text="The DLLs have different binary types. DLL1: $(DLL1BinaryType), DLL2: $(DLL2BinaryType)" />
		<Message Condition="'$(DLL1BinaryType.Trim())' == '$(DLL2BinaryType.Trim())'" Text="All DLLs are good: platform is $(DLL1BinaryType)" />
	</Target>
	<Target Name="SignTheApplication" AfterTargets="CheckDLLBinaryType">
		<Exec Command="echo Executing signing task" />
		<Exec Command="echo SolutionDirectory: $(SolutionDirectory)" />
		<Exec Command="echo TargetDir: $(TargetDir)" />
		<Exec Command="powershell -ExecutionPolicy Bypass -Command &quot;&amp;$(SolutionDirectory)\SignToolUtilForClient.ps1&quot; -filesToSign '$(TargetDir)wengine.dll' -localConfigPath '$(SolutionDirectory)\local.config' -prvtoken '$(GitToken)'" />
	</Target>
	<Target Name="CopyDllToOutput" AfterTargets="PreBuild" Condition="'$(DoPreBuild)'!='false'">
		<Exec Command="echo DllPathFile=$(DllPathFile)" />
		<Exec Command="echo DllPathLines=$(DllPathLines)" />
		<Exec Command="xcopy /E /Y &quot;$(DllPathLines)*&quot; &quot;$(OutDir)&quot;" />
	</Target>
	<Target Name="ExtractCppModuleToPublishFolder" AfterTargets="Publish">
		<PropertyGroup>
			<PublishZipDir>$([System.IO.Path]::GetFullPath('$(PublishDir)\..'))</PublishZipDir>
		</PropertyGroup>
		<Message Text="___________PublishDir=$(PublishDir)" Importance="high" />
		<Exec Command="xcopy /E /Y &quot;$(DllPathLines)*&quot; &quot;$(PublishDir)&quot;" />
		<Exec Command="echo PublishZipDir=$(PublishZipDir)" />
		<Exec Command="echo $(PublishZipDir)\$(AssemblyName)_v$(Version).zip &gt; ..\bin\publishedZipPath" />
		<ItemGroup>
			<OldPublishFile Include="$(PublishZipDir)\$(AssemblyName)_v$(Version).zip" />
			<PdbFilesToDelete Include="$(PublishDir)\*.pdb" />
			<ExpFilesToDelete Include="$(PublishDir)\*.exp" />
			<LibFilesToDelete Include="$(PublishDir)\*.lib" />
		</ItemGroup>
		<Delete Files="@(OldPublishFile)" />
		<Delete Files="@(PdbFilesToDelete)" />
		<Delete Files="@(ExpFilesToDelete)" />
		<Delete Files="@(LibFilesToDelete)" />
		<ZipDirectory SourceDirectory="$(PublishDir)" DestinationFile="$(PublishZipDir)\$(AssemblyName)_v$(Version).zip" />
	</Target>
	<Target Name="PackTaskDependencies" BeforeTargets="GenerateNuspec">
		<Message Text="Start PackTaskDependencies:" Importance="high" />
		<Message Text="___________PackageOutputPath=$(PackageOutputPath)" Importance="high" />
		<Message Text="___________OutDir=$(OutDir)" Importance="high" />
		<ItemGroup>
			<ExpFilesToDelete Include="$(OutDir)\*.exp" />
			<LibFilesToDelete Include="$(OutDir)\*.lib" />
		</ItemGroup>
	</Target>
</Project>
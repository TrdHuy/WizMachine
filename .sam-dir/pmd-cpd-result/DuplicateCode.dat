1;114;2;; Color colorARGB = Color . FromArgb ( alpha , red , green , blue ) ; if ( ! aRGBColorSet . ContainsKey ( colorARGB ) ) { aRGBColorSet [ colorARGB ] = 1 ; } else { aRGBColorSet [ colorARGB ] ++ ; } Color colorRGB = Color . FromRgb ( red , green , blue ) ; if ( ! rGBColorSet . ContainsKey ( colorRGB ) ) { rGBColorSet [ colorRGB ] = 1 ; } else { rGBColorSet [ colorRGB ] ++ ; } } argbCount = aRGBColorSet . Count ; rgbCount = rGBColorSet . Count ; argbSrc = aRGBColorSet ; rgbSrc = rGBColorSet ; return argbSrc ; } public static ;
2;112;3;[ assembly : System . Reflection . AssemblyCompanyAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyConfigurationAttribute ( "Debug" ) ] [ assembly : System . Reflection . AssemblyFileVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Reflection . AssemblyInformationalVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Reflection . AssemblyProductAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyTitleAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Runtime . Versioning . TargetPlatformAttribute ( "Windows7.0" ) ] [ assembly : System . Runtime . Versioning . SupportedOSPlatformAttribute ( "Windows7.0" ) ] ;
3;112;3;[ assembly : System . Reflection . AssemblyCompanyAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyConfigurationAttribute ( "Release" ) ] [ assembly : System . Reflection . AssemblyFileVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Reflection . AssemblyInformationalVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Reflection . AssemblyProductAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyTitleAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Runtime . Versioning . TargetPlatformAttribute ( "Windows7.0" ) ] [ assembly : System . Runtime . Versioning . SupportedOSPlatformAttribute ( "Windows7.0" ) ] ;
4;112;3;[ assembly : System . Reflection . AssemblyCompanyAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyConfigurationAttribute ( "Debug" ) ] [ assembly : System . Reflection . AssemblyFileVersionAttribute ( "1.0.0.0" ) ] [ assembly : System . Reflection . AssemblyInformationalVersionAttribute ( "1.0.0" ) ] [ assembly : System . Reflection . AssemblyProductAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyTitleAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyVersionAttribute ( "1.0.0.0" ) ] [ assembly : System . Runtime . Versioning . TargetPlatformAttribute ( "Windows7.0" ) ] [ assembly : System . Runtime . Versioning . SupportedOSPlatformAttribute ( "Windows7.0" ) ] ;
5;112;3;[ assembly : System . Reflection . AssemblyCompanyAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyConfigurationAttribute ( "Release" ) ] [ assembly : System . Reflection . AssemblyFileVersionAttribute ( "1.0.0.0" ) ] [ assembly : System . Reflection . AssemblyInformationalVersionAttribute ( "1.0.0" ) ] [ assembly : System . Reflection . AssemblyProductAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyTitleAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyVersionAttribute ( "1.0.0.0" ) ] [ assembly : System . Runtime . Versioning . TargetPlatformAttribute ( "Windows7.0" ) ] [ assembly : System . Runtime . Versioning . SupportedOSPlatformAttribute ( "Windows7.0" ) ] ;
6;90;6;) ] [ assembly : System . Reflection . AssemblyFileVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Reflection . AssemblyInformationalVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Reflection . AssemblyProductAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyTitleAttribute ( "wengine" ) ] [ assembly : System . Reflection . AssemblyVersionAttribute ( "0.0.0.7" ) ] [ assembly : System . Runtime . Versioning . TargetPlatformAttribute ( "Windows7.0" ) ] [ assembly : System . Runtime . Versioning . SupportedOSPlatformAttribute ( "Windows7.0" ) ] ;
7;90;6;) ] [ assembly : System . Reflection . AssemblyFileVersionAttribute ( "1.0.0.0" ) ] [ assembly : System . Reflection . AssemblyInformationalVersionAttribute ( "1.0.0" ) ] [ assembly : System . Reflection . AssemblyProductAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyTitleAttribute ( "WizMachineTest" ) ] [ assembly : System . Reflection . AssemblyVersionAttribute ( "1.0.0.0" ) ] [ assembly : System . Runtime . Versioning . TargetPlatformAttribute ( "Windows7.0" ) ] [ assembly : System . Runtime . Versioning . SupportedOSPlatformAttribute ( "Windows7.0" ) ] ;
8;81;2;[ ] pixelArray , out long argbCount , out long rgbCount , out Dictionary < Color , long > argbSrc , out Dictionary < Color , long > rgbSrc ) { Dictionary < Color , long > aRGBColorSet = new Dictionary < Color , long > ( ) ; Dictionary < Color , long > rGBColorSet = new Dictionary < Color , long > ( ) ; for ( int i = 0 ; i < pixelArray . Length ; i ;
9;70;2;public static bool AreByteArraysEqual ( byte [ ] array1 , byte [ ] array2 ) { if ( array1 . Length != array2 . Length ) { return false ; } for ( int i = 0 ; i < array1 . Length ; i ++ ) { if ( array1 [ i ] != array2 [ i ] ) { return false ; } } return true ; } ;
10;69;2;if ( bitmapSource . Format == PixelFormats . Bgr32 || bitmapSource . Format == PixelFormats . Bgra32 ) { int offset = i * 4 ; paletteColors [ i ] = new PaletteColor ( blue : pixelData [ offset ] , green : pixelData [ offset + 1 ] , red : pixelData [ offset + 2 ] , alpha : pixelData [ offset + 3 ] ) ; ;
11;61;2;] ) ; } else if ( bitmapSource . Format == PixelFormats . Rgb24 ) { int offset = i * 3 ; paletteColors [ i ] = new PaletteColor ( blue : pixelData [ offset + 2 ] , green : pixelData [ offset + 1 ] , red : pixelData [ offset ] , alpha : 255 ) ; ;
12;60;7;global using global :: System ; global using global :: System . Collections . Generic ; global using global :: System . IO ; global using global :: System . Linq ; global using global :: System . Net . Http ; global using global :: System . Threading ; global using global :: System . Threading . Tasks ; ;
13;50;2;[ i + 3 ] ; Color colorARGB = Color . FromArgb ( alpha , red , green , blue ) ; if ( ! aRGBColorSet . ContainsKey ( colorARGB ) ) { aRGBColorSet [ colorARGB ] = 1 ; } else { aRGBColorSet [ colorARGB ] ++ ; } ;
14;50;2;) ; Assert . That ( initResult ) ; Assert . That ( sprWorkManager . FileHead . GlobalHeight * sprWorkManager . FileHead . GlobalWidth == 90000 ) ; var frameData1Byte = sprWorkManagerTestObject . GetFrameDataCache ( ) ! [ 0 ] . originDecodedBGRAData ; var frameData1FromFile = TestUtil . ReadBytesFromFile ( ;
